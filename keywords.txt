'{% if forloop.first %}'

'{% endif %}'

'{% if forloop.last %}'

'{% endif %}'


KEYWORD 0001

'{% if forloop.last %}'
$('#equitytotal').append(
`
<tr role="row" class="odd">
<td tabindex="0" class="sorting_1">Net Income</td>
<td colspan="" rowspan="" headers=""></td>
<td>$${netincome}</td>
</tr>


<tr role="row" class="odd" style="border-bottom: double; border-top: dashed;">
<td tabindex="0" class="sorting_1"><strong>Total Share Holders Equity</strong></td>
<td colspan="" rowspan="" headers=""></td>
<td>$${(capital-drawing)+netincome}</td>
</tr>`
);

'{% endif %}'

KEYWORD 0001 END



KEY 0002

journalList = journalmain.objects.all()
				startdate = request.POST.get("startdate",False)
				enddate = request.POST.get("enddate",False)
				print(startdate)
				print(enddate)
				if startdate is not False:
					
					starttime = datetime.strptime(startdate,'%m/%d/%Y')

					endtime = datetime.strptime(enddate,'%m/%d/%Y')

					newstart = starttime.strftime('%Y-%m-%d')

					newend = endtime.strftime('%Y-%m-%d')

					current_assets = journalcollections.objects.filter(transaction_date__gte=newstart,
								transaction_date__lte=newend).filter(account_id__account_type='Current assets')\
								.order_by('account_id__account_number')

					# current_assets_total = journalcollections.objects.filter(transaction_date__gte=newstart,
					# 			transaction_date__lte=newend).filter(account_id__account_type='Current assets')\
					# 			.annotate(totalcurrentAssets=F('debits') - F('credits')).first()

					nonCurrent_assets = journalcollections.objects.filter(transaction_date__gte=newstart,
								transaction_date__lte=newend).filter(Q(account_id__account_type='Fixed assets')\
								|Q(account_id__account_type='Non-current assets')).order_by('account_id__account_number')
					
					current_liabilities = journalcollections.objects.filter(transaction_date__gte=newstart,
								transaction_date__lte=newend).filter(account_id__account_type='Current liabilities')\
								.order_by('account_id__account_number')

					nonCurrent_liabilities = journalcollections.objects.filter(transaction_date__gte=newstart,
								transaction_date__lte=newend).filter(account_id__account_type='Non-current liabilities')\
								.order_by('account_id__account_number')			
					
					ownersequity = journalcollections.objects.filter(transaction_date__gte=newstart,
								transaction_date__lte=newend).filter(account_id__account_type="Owner's equity")\
								.order_by('account_id__account_number')

					context = {	"current_assets":current_assets,
								"nonCurrent_assets":nonCurrent_assets,
								"current_liabilities":current_liabilities,
								"nonCurrent_liabilities":nonCurrent_liabilities,
								"ownersequity":ownersequity,
								"Startdate":startdate,
								"Endate":enddate,
								"Journals": journalList,
								"signs": 'True'
								}
				else:
KEY 002 END

KEY 003


				startdate = request.POST.get("startdate",False)
				enddate = request.POST.get("enddate",False)

				if startdate is not False:
					
					starttime = datetime.strptime(startdate,'%m/%d/%Y')

					endtime = datetime.strptime(enddate,'%m/%d/%Y')

					newstart = starttime.strftime('%Y-%m-%d')

					newend = endtime.strftime('%Y-%m-%d')

				else:

KEY 003 END


KEY 004

			# totals1 = journalcollections.objects.filter(account_id__account_number=int(x['accnum']),
			# journalid=create.id).aggregate(totalcreds=Sum('account_id__account_credbalance'))

			# if totals1['totalcreds'] is None:
			# 	totals1['totalcreds'] = base;

			# totals2 = journalcollections.objects.filter(account_id__account_number=int(x['accnum']),
			# journalid=create.id).aggregate(totaldebs=Sum('account_id__account_debbalance'))
			
			# if totals2['totaldebs'] is None:
			# 	totals2['totaldebs'] = base;

KEY 004 END



KEY 005

				

				if startdate is not False:
					
					
					starttime = datetime.strptime(startdate,'%m/%d/%Y')

					endtime = datetime.strptime(enddate,'%m/%d/%Y')

					newstart = starttime.strftime('%Y-%m-%d')

					newend = endtime.strftime('%Y-%m-%d')

					context = {"journals": journalTotals.objects.filter(journalid__datecreated__gte=newstart,
								journalid__datecreated__lte=newend).order_by('account_id__account_number'),
								"Startdate":startdate,
								"Endate":enddate,
								"Journals": journalmain.objects.all(),
								"signs": 'True'}
				else:

KEY 0005 END


KEY GLOBAL. DATE INPUT


            <!--   <div class="col-md-6 col-lg-6 col-sm-12">
                <p>Report Period</p>
                <form class="needs-validation" novalidate>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" required placeholder="Starting date" data-toggle="datepicker-year">
                        <div class="valid-feedback">
                            Looks good!
                        </div>
                        <div class="invalid-feedback">
                            Please Input Starting Date!
                        </div>
                    </div>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" required placeholder="End date" data-toggle="datepicker-year">
                        <div class="valid-feedback">
                            Looks good!
                        </div>
                        <div class="invalid-feedback">
                            Please Input End Date!
                        </div>
                    </div>
                    <input type="submit" value="Run Report" class="btn btn-success">
                                    </form>
            </div> -->








0006


			
			
			try:
				journalList = journalmain.objects.all()
				startdate = request.POST.get("startdate",False)
				enddate = request.POST.get("enddate",False)
				print(startdate)
				print(enddate)
				if startdate is not False:
					
					starttime = datetime.strptime(startdate,'%m/%d/%Y')

					endtime = datetime.strptime(enddate,'%m/%d/%Y')

					newstart = starttime.strftime('%Y-%m-%d')

					newend = endtime.strftime('%Y-%m-%d')

					rowCount = journalcollections.objects.filter(transaction_date__gte=newstart,
								transaction_date__lte=newend).count()

					totaldebit = journalcollections.objects.filter(transaction_date__gte=newstart,
								transaction_date__lte=newend).aggregate(totaldebs=Sum('debits'))

					totalcredit = journalcollections.objects.filter(transaction_date__gte=newstart,
								transaction_date__lte=newend).aggregate(totalcreds=Sum('credits'))
					str(totalcredit.query)

					if totaldebit['totaldebs'] is not None:
						finaltotal = decimal.Decimal(totaldebit['totaldebs'])
					else:
						finaltotal = 0.00

					if totalcredit['totalcreds'] is not None:
						finaltotal1 = decimal.Decimal(totalcredit['totalcreds'])
					else:
						finaltotal1 = 0.00
					

					rangedJournal = journalcollections.objects.filter(transaction_date__gte=newstart,
									transaction_date__lte=newend).order_by('account_id__account_number')

					context = {"journals": rangedJournal,
								"Startdate":startdate,
								"Endate":enddate,
								"Journals": journalList,
								"creditstotal":finaltotal1,
								"debitstotal":finaltotal,
								"rowCount":rowCount,
								"signs": 'True'
								}
				else:

0006 end

def find_current_month_last_day(today: datetime) -> datetime:
		if today.month == 2:
			return today.replace(day=28)
		if today.month in [4, 6, 9, 11]:
			return today.replace(day=30)
		return today.replace(day=31)



	def current_month_first_and_last_days() -> tuple:
		today = dt.now().replace(hour=0, minute=0, second=0, microsecond=0)
		first_date = today.replace(day=1)
		last_date = find_current_month_last_day(today)
		return first_date, last_date
	print(current_month_first_and_last_days())